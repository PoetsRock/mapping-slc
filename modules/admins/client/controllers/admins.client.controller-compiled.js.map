{"version":3,"sources":["admins.client.controller.js"],"names":[],"mappings":"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","file":"admins.client.controller-compiled.js","sourcesContent":["'use strict';\n\n// Admins controller\nangular.module('admins').controller('AdminsController', ['$scope', '$http', '$stateParams', '$location', 'Authentication', 'Projects', 'UserData', 'Contacts', 'AdminAuthService',\n  function ($scope, $http, $stateParams, $location, Authentication, Projects, UserData, Contacts, AdminAuthService) {\n    $scope.authentication = Authentication;\n    $scope.isAdmin = AdminAuthService;\n\n    //function run($rootScope, $state, Authentication) {\n    //\n    //\t$rootScope.$on('$stateChangeStart',\n    //\t\tfunction(event, toState, toParams, fromState, fromParams) {\n    //\t\t\tif ( toState.authenticate && !Authentication.isLoggedIn() ) {\n    //\t\t\t\t$state.go( 'login' );\n    //\t\t\t}\n    //\t\t\tevent.preventDefault();\n    //\t\t}\n    //\t)};\n\n\n    var run = function ($rootScope, $state, Authentication) {\n      $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n        if (toState.authenticate && !Authentication.isLoggedIn()) {\n          $state.go('signin');\n        }\n        event.preventDefault();\n      });\n\n    };\n\n    // If user is not an administrator then redirect back home\n    if (!$scope.admin) $location.path('/');\n\n\n    /**\n     *\n     * Projects Admin Functions\n     *\n     **/\n\n\n      // Remove existing Project\n    $scope.remove = function (project) {\n      if (project) {\n        project.$remove();\n\n        for (var i in $scope.projects) {\n          if ($scope.projects [i] === project) {\n            $scope.projects.splice(i, 1);\n          }\n        }\n      } else {\n        $scope.project.$remove(function () {\n          $location.path('projects');\n        });\n      }\n    };\n\n    // Update existing Project\n    $scope.update = function () {\n      var project = $scope.project;\n\n      project.$update(function () {\n        $location.path('projects/' + project._id);\n      }, function (errorResponse) {\n        $scope.error = errorResponse.data.message;\n      });\n    };\n\n    // Find a list of Projects\n    $scope.findProjects = function () {\n      $scope.projects = Projects.query();\n    };\n\n    // Find existing Project\n    $scope.findOneProject = function () {\n      $scope.project = Projects.get({\n        projectId: $stateParams.projectId\n      });\n    };\n\n\n    /**\n     *\n     * Users Admin Functions\n     *\n     **/\n\n\n      // Update a user profile\n    $scope.updateUserProfile = function () {\n      $scope.success = $scope.error = null;\n      var user = new UserData($scope.user);\n\n      user.$update(function (response) {\n        $scope.success = true;\n        Authentication.user = response;\n      }, function (response) {\n        $scope.error = response.data.message;\n      });\n    };\n\n\n    // Check if there are additional accounts\n    $scope.hasConnectedAdditionalSocialAccounts = function (provider) {\n      for (var i in $scope.user.additionalProvidersData) {\n        return true;\n      }\n\n      return false;\n    };\n\n    // Check if provider is already in use with current user\n    $scope.isConnectedSocialAccount = function (provider) {\n      return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);\n    };\n\n\n    \n  }\n]);\n"]}